{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "This element creates an Active Directory forest with a single site and a single domain controller. The Domain Administrator password will be the one set by this template.",
    "Parameters" :
    {
        "DcInstanceType" :
        {
            "Description" : "Amazon EC2 instance type for the Domain Controller Instance",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" :
            [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge"
            ]
        },
        "ADDomainAdminPw" :
        {
            "Description" : "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
            "Type" : "String",
            "MinLength" : "8",
            "MaxLength" : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho" : "true",
            "Default" : "Password123"
        },
        "ADDomainDNSName" :
        {
            "Description" : "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "Type" : "String",
            "Default" : "example.com",
            "MinLength" : "3",
            "MaxLength" : "25",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "ADRestoreModePw" :
        {
            "Description" : "Password for a separate Administrator account when the domain controller is in Restore Mode. Must be at least 8 characters containing letters, numbers and symbols",
            "Type" : "String",
            "MinLength" : "8",
            "MaxLength" : "32",
            "AllowedPattern" : "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "NoEcho" : "True",
            "Default" : "Password123"
        },
        "CIDRVPC" :
        {
            "Description" : "CIDR Block for the VPC (Example: 10.0.0.0/16, etc...)",
            "Type" : "String",
            "Default" : "10.0.0.0/16",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPrivateSubnet" :
        {
            "Description" : "CIDR Block for a Private Subnet (Example: 10.0.0.0/19, 10.0.64.0/19, etc...)",
            "Type" : "String",
            "Default" : "10.0.0.0/19",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "CIDRPublicSubnet" :
        {
            "Description" : "CIDR Block for a Public DMZ Subnet (Example: 10.0.32.0/20, 10.0.96.0/20, etc...)",
            "Type" : "String",
            "Default" : "10.0.32.0/20",
            "AllowedPattern" : "[a-zA-Z0-9]+\\..+"
        },
        "DcComputerName" :
        {
            "Description" : "NetBIOS computer name of the Domain Controller(Example: dc001, dc002, dc003, etc...)",
            "Type" : "String",
            "Default" : "dc001",
            "MinLength" : "1",
            "MaxLength" : "15",
            "AllowedPattern" : "[a-zA-Z0-9]+"
        },
        "DcPrivateIp" :
        {
            "Description" : "Fixed private IP for the Domain Controller instance (e.g. 10.0.0.10, 10.0.64.10, etc...)",
            "Type" : "String",
            "Default" : "10.0.0.10"
        },
        "DcSecurityGroupId" :
        {
            "Description" : "ID of the security group for domain controllers",
            "Type" : "AWS::EC2::SecurityGroup::Id"
        },
        "KeyPairName" :
        {
            "Description" : "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type" : "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnetId" :
        {
            "Description" : "Subnet ID for the Private Subnet where the AD Domain Controller instance will run",
            "Type" : "AWS::EC2::Subnet::Id"
        },
        "RemoteAccessUserGroup" :
        {
            "Description" : "Domain group that will be used to authorize users to connect via the RDGW",
            "Type" : "String",
            "Default" : "Remote Access Users",
            "MinLength" : "1"
        },
        "VPC" :
        {
            "Description" : "VPC ID",
            "Type" : "AWS::EC2::VPC::Id"
        }
    },
    "Mappings" :
    {
        "AWSInstanceType2Arch" :
        {
            "t2.micro" : { "Arch" : "64" },
            "t2.small" : { "Arch" : "64" },
            "t2.medium" : { "Arch" : "64" },
            "c4.large" : { "Arch" : "64" },
            "c4.xlarge" : { "Arch" : "64" },
            "m4.large" : { "Arch" : "64" },
            "m4.xlarge" : { "Arch" : "64" }
        },
        "AWSRegionArch2AMI" :
        {
            "us-east-1" : { "64" : "ami-5b9e6b30" },
            "us-west-2" : { "64" : "ami-67c7ff57" },
            "us-west-1" : { "64" : "ami-c5688281" },
            "eu-west-1" : { "64" : "ami-c1740ab6" },
            "eu-central-1" : { "64" : "ami-2e87be33" },
            "ap-southeast-1" : { "64" : "ami-e0d1ebb2" },
            "ap-northeast-1" : { "64" : "ami-c6b46dc6" },
            "sa-east-1" : { "64" : "ami-b93bbba4" },
            "ap-southeast-2" : { "64" : "ami-f9760dc3" }
        }
    },
    "Resources" :
    {
        "DcElasticNetworkInterface" :
        {
            "Type" : "AWS::EC2::NetworkInterface",
            "Properties" :
            {
                "Description" : "Network Interface for DC Instance",
                "SubnetId" : { "Ref" : "PrivateSubnetId" },
                "GroupSet" :
                [
                    {
                        "Ref" : "DcSecurityGroupId"
                    }
                ],
                "PrivateIpAddress" : { "Ref" : "DcPrivateIp" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" :
                        { "Fn::Join" : ["", [
                            "DomainController-",
                            { "Ref" : "AWS::StackName" }
                        ]]}
                    }
                ]
            }
        },
        "DomainController" :
        {
            "Type" : "AWS::EC2::Instance",
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : "1",
                    "Timeout" : "PT40M"
                }
            },
            "Metadata" :
            {
                "AWS::CloudFormation::Init" :
                {
                    "configSets" :
                    {
                        "config" :
                        [
                            "setup",
                            "init",
                            "installADDS",
                            "configureDns",
                            "configureSites",
                            "createRemoteAccessGroup",
                            "finalize"
                        ],
                        "update" :
                        [
                            "setup",
                            "finalize"
                        ]
                    },
                    "setup" :
                    {
                        "files" :
                        {
                            "c:\\cfn\\cfn-hup.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackName" },
                                    "\n",
                                    "region=", { "Ref" : "AWS::Region" },
                                    "\n"
                                ]]}
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.DomainController.Metadata.AWS::CloudFormation::Init\n",
                                    "action=cfn-init.exe -v -c update",
                                    " -s ", { "Ref" : "AWS::StackId" },
                                    " -r DomainController",
                                    " --region ", { "Ref" : "AWS::Region" },
                                    "\n"
                                ]]}
                            },
                            "c:\\cfn\\scripts\\set-staticip.ps1" :
                            {
                                "content" :
                                { "Fn::Join" : [ "", [
                                    "$netip = Get-NetIPConfiguration;",
                                    "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                                    "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $netip.IPv4Address.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                                    "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                                    "\n"
                                ]]}
                            },
                            "c:\\cfn\\scripts\\assert-computername.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/assert-computername.ps1"
                            },
                            "c:\\cfn\\scripts\\assert-hadc.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/assert-hadc.ps1"
                            },
                            "c:\\cfn\\modules\\xcomputermanagement-1.3.0.zip" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/xcomputermanagement-1.3.0.zip"
                            },
                            "c:\\cfn\\modules\\xactivedirectory-2.4.0.0.zip" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/xactivedirectory-2.4.0.0.zip"
                            },
                            "c:\\cfn\\modules\\xnetworking-2.2.0.0.zip" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/xnetworking-2.2.0.0.zip"
                            },
                            "c:\\cfn\\scripts\\unzip-archive.ps1" :
                            {
                                "source" : "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/unzip-archive.ps1"
                            }
                        },
                        "services" :
                        {
                            "windows" :
                            {
                                "cfn-hup" :
                                {
                                    "enabled" : "true",
                                    "ensureRunning" : "true",
                                    "files" :
                                    [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        },
                        "commands" :
                        {
                            "10-disable-win-fw" :
                            {
                                "command" : "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False\"",
                                "waitAfterCompletion" : "0"
                            },
                            "20-set-execution-policy" :
                            {
                                "command" : "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion" : "0"
                            },
                            "30-unpack-ad-dsc-resource" :
                            {
                                "command" : "powershell.exe -command c:\\cfn\\scripts\\unzip-archive.ps1 -Source c:\\cfn\\modules\\xactivedirectory-2.4.0.0.zip -Destination '%ProgramFiles%\\WindowsPowerShell\\Modules'",
                                "waitAfterCompletion" : "0"
                            },
                            "40-unpack-nw-dsc-resource" :
                            {
                                "command" : "powershell.exe -command c:\\cfn\\scripts\\unzip-archive.ps1 -Source c:\\cfn\\modules\\xnetworking-2.2.0.0.zip -Destination '%ProgramFiles%\\WindowsPowerShell\\Modules'",
                                "waitAfterCompletion" : "0"
                            },
                            "50-unpack-cm-dsc-resource" :
                            {
                                "command" : "powershell.exe -command c:\\cfn\\scripts\\unzip-archive.ps1 -Source c:\\cfn\\modules\\xcomputermanagement-1.3.0.zip -Destination '%ProgramFiles%\\WindowsPowerShell\\Modules'",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "init" :
                    {
                        "commands" :
                        {
                            "10-set-static-ip" :
                            {
                                "command" : "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\set-staticip.ps1",
                                "waitAfterCompletion" : "45",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not ",
                                    "((Get-NetIPConfiguration).netipv4interface.dhcp -eq 'Disabled')) ",
                                    "{ continue } else { throw 'IP Address is already static.' }"
                                ]]}
                            },
                            "20-rename" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -ExecutionPolicy RemoteSigned -Command \"",
                                    "c:\\cfn\\scripts\\assert-computername.ps1 -ComputerName ",
                                    { "Ref" : "DcComputerName" }
                                ]]},
                                "waitAfterCompletion" : "forever",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not ('",
                                    { "Ref" : "DcComputerName" },
                                    "' -eq $env:computername)) ",
                                    "{ continue } else { throw 'Computer name is already configured.' }"
                                ]]}
                            }
                        }
                    },
                    "installADDS" :
                    {
                        "commands" :
                        {
                            "05-install-prereqs" :
                            {
                                "command" : "powershell.exe -Command \"Install-WindowsFeature rsat-adds -IncludeAllSubFeature\"",
                                "waitAfterCompletion" : "0"
                            },
                            "10-create-domain" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -ExecutionPolicy RemoteSigned -Command \"",
                                    "c:\\cfn\\scripts\\assert-hadc.ps1 -DomainAdminUsername ",
                                    "'Administrator'",
                                    " -DomainAdminPw '", { "Ref" : "ADDomainAdminPw" },
                                    "' -RestoreModePw '", { "Ref" : "ADRestoreModePw" },
                                    "' -DomainDnsName '", { "Ref" : "ADDomainDNSName" },
                                    "' -DcRole 'Primary DC' -Verbose\""
                                ]]},
                                "waitAfterCompletion" : "forever",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "try { $addomain = get-addomain -Server ",
                                    { "Ref" : "ADDomainDNSName" },
                                    " -Credential (",
                                    "New-Object System.Management.Automation.PSCredential ",
                                    "-ArgumentList 'Administrator@",
                                    { "Ref" : "ADDomainDNSName" }, "',",
                                    "(ConvertTo-SecureString ", "'",
                                    { "Ref" : "ADDomainAdminPw" }, "'",
                                    " -AsPlainText -Force)) ",
                                    "} catch { continue } finally { ",
                                    "if ($addomain) { ",
                                    "throw 'Domain already exists, ",
                                    "skipping domain creation.' } }",
                                    "\""
                                ]]}
                            },
                            "20-install-adds" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -ExecutionPolicy RemoteSigned -Command \"",
                                    "c:\\cfn\\scripts\\assert-hadc.ps1 -DomainAdminUsername ",
                                    "'Administrator'",
                                    " -DomainAdminPw '", { "Ref" : "ADDomainAdminPw" },
                                    "' -RestoreModePw '", { "Ref" : "ADRestoreModePw" },
                                    "' -DomainDnsName '", { "Ref" : "ADDomainDNSName" },
                                    "' -DcRole 'Replica DC' -Verbose\""
                                ]]},
                                "waitAfterCompletion" : "forever",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "try { $addomain = get-addomain",
                                    " -Server ", { "Ref" : "ADDomainDNSName" },
                                    " -Credential (",
                                    " New-Object System.Management.Automation.PSCredential",
                                    " -ArgumentList 'Administrator@",
                                    { "Ref" : "ADDomainDNSName" }, "',",
                                    "(ConvertTo-SecureString ", "'",
                                    { "Ref" : "ADDomainAdminPw" }, "'",
                                    " -AsPlainText -Force)) ",
                                    "} catch { continue } finally { if (", "'",
                                    { "Ref" : "DcComputerName" }, ".",
                                    { "Ref" : "ADDomainDNSName" }, "'",
                                    " -in $addomain.ReplicaDomainControllers) {",
                                    " throw 'Instance is already a DC,",
                                    " no additional configuration required.' } }",
                                    "\""
                                ]]}
                            },
                            "30-create-adminuser" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "New-ADUser",
                                    " -Name 'Administrator'",
                                    " -UserPrincipalName 'Administrator@",
                                    { "Ref" : "ADDomainDNSName" }, "'",
                                    " -AccountPassword (ConvertTo-SecureString '",
                                    { "Ref" : "ADDomainAdminPw" }, "'",
                                    " -AsPlainText -Force)",
                                    " -Enabled $true",
                                    " -PasswordNeverExpires $true\""
                                ]]},
                                "waitAfterCompletion" : "0",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not",
                                    " (Get-ADUser -filter {sAMAccountName -eq",
                                    " 'Administrator'",
                                    " })) { continue } else { throw 'User already exists.' }"
                                ]]}
                            },
                            "40-update-adminuser" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe ",
                                    "\"",
                                    "@('Domain Admins','Schema Admins','Enterprise Admins') |",
                                    " ForEach-Object { Add-ADGroupMember -Identity $_ -Members",
                                    " 'Administrator'",
                                    " }\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configureDns" :
                    {
                        "commands" :
                        {
                            "10-set-dns-serveraddress" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "Get-NetAdapter | Set-DnsClientServerAddress",
                                    " -ServerAddresses 127.0.0.1\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            },
                            "20-add-reverse-zone" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "try { Add-DnsServerPrimaryZone",
                                    " -NetworkId '", { "Ref" : "CIDRVPC" }, "'",
                                    " -ReplicationScope 'Forest'",
                                    " -DynamicUpdate 'Secure'",
                                    " -ErrorAction Stop",
                                    " } catch { exit 0 }",
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            },
                            "30-update-dns-registration" :
                            {
                                "command" : "ipconfig /registerdns",
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "configureSites" :
                    {
                        "commands" :
                        {
                            "10-rename-default-site" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe ",
                                    "\"",
                                    "Get-ADObject -SearchBase (Get-ADRootDSE).ConfigurationNamingContext -filter {Name -eq 'Default-First-Site-Name'} | Rename-ADObject -NewName ",
                                    "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            },
                            "15-add-new-site" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe ",
                                    "\"",
                                    "New-ADReplicationSite -Name ",
                                    "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                                    " -InterSiteTopologyGenerator ",
                                    { "Ref" : "DcComputerName" },
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not ",
                                    "(Get-ADReplicationSite -filter {Name -eq ",
                                    "'",
                                    "$(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                                    "'",
                                    "})) { continue } else { throw 'Site already exists in AD.' }"
                                ]]}
                            },
                            "20-create-public-subnet" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                    { "Ref" : "CIDRPublicSubnet" },
                                    " -Site ",
                                    "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)"
                                ]]},
                                "waitAfterCompletion" : "0",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not ",
                                    "(Get-ADReplicationSubnet -filter {Name -eq ",
                                    "'",
                                    { "Ref" : "CIDRPublicSubnet" },
                                    "'",
                                    "})) { continue } else { throw 'Subnet already exists in AD.' }"
                                ]]}
                            },
                            "30-create-private-subnet" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                            "powershell.exe -Command New-ADReplicationSubnet -Name ",
                                            { "Ref" : "CIDRPrivateSubnet" },
                                            " -Site ",
                                            "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)"
                                ]]},
                                "waitAfterCompletion" : "0",
                                "test" :
                                { "Fn::Join" : [ "", [
                                            "powershell.exe -Command if (-not ",
                                            "(Get-ADReplicationSubnet -filter {Name -eq ",
                                            "'",
                                            { "Ref" : "CIDRPrivateSubnet" },
                                            "'",
                                            "})) { continue } else { throw 'Subnet already exists in AD.' }"
                                ]]}
                            },
                            "40-move-ad-server" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command Move-ADDirectoryServer -Identity ",
                                    { "Ref" : "DcComputerName" },
                                    " -Site ",
                                    "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)"
                                ]]},
                                "waitAfterCompletion" : "0"
                            },
                            "50-set-site-link" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command \"",
                                    "Get-ADReplicationSiteLink -Filter * | ",
                                    "Set-ADReplicationSiteLink -SitesIncluded ",
                                    "@{add=",
                                    "(invoke-restmethod -uri http://169.254.169.254/latest/meta-data/placement/availability-zone)",
                                    "} -ReplicationFrequencyInMinutes 15",
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "createRemoteAccessGroup" :
                    {
                        "commands" :
                        {
                            "10-create-remoteaccess-group" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command ",
                                    "\"",
                                    "New-ADGroup -Name '",
                                    { "Ref" : "RemoteAccessUserGroup" },
                                    "'",
                                    " -GroupScope Global",
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0",
                                "test" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command if (-not ",
                                    "(Get-ADGroup -filter {Name -eq ",
                                    "'",
                                    { "Ref" : "RemoteAccessUserGroup" },
                                    "'",
                                    "})) { continue } else { throw 'Group already exists in AD.' }"
                                ]]}
                            },
                            "20-update-remoteaccess-group" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "powershell.exe -Command ",
                                    "\"",
                                    "Add-ADGroupMember -Identity ",
                                    "'",
                                    { "Ref" : "RemoteAccessUserGroup" },
                                    "'",
                                    " -Members 'Domain Admins'",
                                    "\""
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    },
                    "finalize" :
                    {
                        "commands" :
                        {
                            "10-signal-success" :
                            {
                                "command" :
                                { "Fn::Join" : [ "", [
                                    "cfn-signal.exe -e 0",
                                    " --stack ", { "Ref" : "AWS::StackName" },
                                    " --resource DomainController ",
                                    " --region ", { "Ref" : "AWS::Region"}
                                ]]},
                                "waitAfterCompletion" : "0"
                            }
                        }
                    }
                }
            },
            "Properties" :
            {
                "ImageId" :
                {
                    "Fn::FindInMap" :
                    [
                        "AWSRegionArch2AMI",
                        { "Ref" : "AWS::Region" },
                        {
                            "Fn::FindInMap" :
                            [
                                "AWSInstanceType2Arch",
                                { "Ref" : "DcInstanceType" },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : { "Ref" : "DcInstanceType" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Fn::Join" : [ "", [
                            "DomainController-",
                            { "Ref" : "PrivateSubnetId" }
                        ]]}
                    }
                ],
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" :
                        {
                            "VolumeSize" : "100",
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "NetworkInterfaces" :
                [
                    {
                        "DeviceIndex" : "0",
                        "NetworkInterfaceId" :
                        {
                            "Ref" : "DcElasticNetworkInterface" 
                        }
                    }
                ],
                "KeyName" : { "Ref" : "KeyPairName" },
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "<script>\n",
                    "cfn-init.exe -v -c config",
                    " -s ", { "Ref" : "AWS::StackId" },
                    " -r DomainController",
                    " --region ", { "Ref" : "AWS::Region" },
                    "\n",
                    "</script>\n"
                ]]}}
            }
        },
        "DcARecordSet" :
        {
            "Type" : "AWS::Route53::RecordSet",
            "DependsOn" : "DomainController",
            "Properties" :
            {
                "HostedZoneName" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Name" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "DcComputerName" }, ".",
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Type" : "A",
                "TTL" : "300",
                "ResourceRecords" :
                [
                    { "Fn::GetAtt" : [ "DomainController", "PrivateIp" ] }
                ]
            }
        },
        "DcSrvRecordSet" :
        {
            "Type" : "AWS::Route53::RecordSet",
            "DependsOn" : "DomainController",
            "Properties" :
            {
                "HostedZoneName" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Name" :
                { "Fn::Join" : [ "", [
                    "_ldap._tcp.dc._msdcs.",
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Type" : "SRV",
                "TTL" : "300",
                "ResourceRecords" :
                [
                    { "Fn::Join" : [ "", [
                        "0 100 389 ",
                        { "Ref" : "DcComputerName" }, ".",
                        { "Ref" : "ADDomainDNSName" },
                        "."
                    ]]}
                ],
                "SetIdentifier" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "DcComputerName" }, ".",
                    { "Ref" : "AWS::StackName" },
                    "."
                ]]},
                "Weight" : "20"
            }
        },
        "DomainARecordSet" :
        {
            "Type" : "AWS::Route53::RecordSet",
            "DependsOn" : "DomainController",
            "Properties" :
            {
                "HostedZoneName" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Name" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "ADDomainDNSName" },
                    "."
                ]]},
                "Type" : "A",
                "TTL" : "300",
                "ResourceRecords" :
                [
                    { "Fn::Join" : [ "", [
                        { "Ref" : "DcPrivateIp" }
                    ]]}
                ],
                "SetIdentifier" :
                { "Fn::Join" : [ "", [
                    { "Ref" : "DcComputerName" }, ".",
                    { "Ref" : "AWS::StackName" },
                    "."
                ]]},
                "Weight" : "20"
            }
        }
    },
    "Outputs" :
    {
        "DomainAdmin" :
        {
            "Value" :
            { "Fn::Join" : [ "", [
                "Administrator",
                "@",
                { "Ref" : "ADDomainDNSName" }
            ]]},
            "Description" : "Domain administrator account"
        },
        "DomainControllerID" :
        {
            "Value" : { "Ref" : "DomainController" },
            "Description" : "Instance ID of the Domain Controller"
        }
    }
}
