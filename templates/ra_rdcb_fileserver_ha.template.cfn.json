{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AssignPublicIp": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NoPublicIp"
                        },
                        "true"
                    ]
                }
            ]
        },
        "CreateSnsSubscription": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NotificationEmail"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseAmiLookup": {
            "Fn::Equals": [
                {
                    "Ref": "AmiId"
                },
                ""
            ]
        },
        "UseVolumeSnapshot": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "DataVolumeSnapshotId"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "This template deploys an HA Connection Broker (master) / file server for home directories and profiles.",
    "Mappings": {
        "InstanceTypeMap": {
            "c4.large": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "c4.xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "m4.large": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "m4.xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "r4.large": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "r4.xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t2.2xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t2.large": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t2.medium": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t2.micro": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t2.small": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t2.xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "false"
            },
            "t3.2xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t3.large": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t3.medium": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t3.micro": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t3.small": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            },
            "t3.xlarge": {
                "HasInstanceVolume": "false",
                "SupportsEbsOptimized": "true"
            }
        },
        "ShellCommandMap": {
            "cmd": {
                "command": "cmd.exe /c "
            },
            "powershell": {
                "command": "powershell.exe -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Bypass "
            },
            "psexec": {
                "command": "c:\\cfn\\files\\pstools\\psexec.exe -accepteula -nobanner -h "
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "AmiNameSearchString",
                        "AmiId",
                        "InstanceType",
                        "KeyPairName",
                        "DataVolumeSnapshotId",
                        "DataVolumeSize",
                        "ExtraSecurityGroupIds",
                        "Ec2SubnetAz",
                        "Ec2SubnetId",
                        "NoPublicIp"
                    ]
                },
                {
                    "Label": {
                        "default": "RDCB Application Configuration"
                    },
                    "Parameters": [
                        "DomainDirectoryId",
                        "DomainDnsName",
                        "DomainNetbiosName",
                        "DomainAccessUserGroup",
                        "RdClientAccessName",
                        "SsmKeyId",
                        "SsmRdcbCredential"
                    ]
                },
                {
                    "Label": {
                        "default": "RDS DB Instance Configuration"
                    },
                    "Parameters": [
                        "RdsSqlEngine",
                        "RdsDbClass",
                        "RdsDbAllocatedStorage",
                        "RdsSnapshotArn",
                        "RdsDbName",
                        "RdsDbPassword",
                        "RdsDbUsername",
                        "RdsMultiAzDatabase",
                        "RdsSubnets"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcId"
                    ]
                },
                {
                    "Label": {
                        "default": "Management Configuration"
                    },
                    "Parameters": [
                        "NotificationEmail"
                    ]
                }
            ],
            "ParameterLabels": {
                "AmiNameSearchString": {
                    "default": "AMI Name Search Pattern"
                }
            }
        },
        "Version": "0.5.0"
    },
    "Outputs": {
        "RdcbEc2InstanceId": {
            "Description": "Instance ID of the RDCB File Server",
            "Value": {
                "Ref": "RdCbFileServerInstance"
            }
        },
        "RdcbEc2InstanceIp": {
            "Description": "IP address of the RDCB File Server",
            "Value": {
                "Fn::GetAtt": [
                    "RdCbFileServerInstance",
                    "PrivateIp"
                ]
            }
        },
        "RdcbRdsDbEndpointAddress": {
            "Description": "DB Endpoint Address for the RDCB RDS Instance",
            "Value": {
                "Fn::GetAtt": [
                    "RdsInstance",
                    "Endpoint.Address"
                ]
            }
        },
        "RdcbRdsDbInstanceId": {
            "Description": "DB Instance Identifier for the RDCB RDS Instance",
            "Value": {
                "Ref": "RdsInstance"
            }
        },
        "SnsArn": {
            "Description": "ARN for SNS topic",
            "Value": {
                "Ref": "SnsTopic"
            }
        }
    },
    "Parameters": {
        "AmiId": {
            "Default": "",
            "Description": "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type": "AWS::EC2::Image::Id"
        },
        "AmiNameSearchString": {
            "Default": "Windows_Server-2016-English-Full-Base-*",
            "Description": "Search pattern to match against an AMI Name",
            "Type": "String"
        },
        "DataVolumeSize": {
            "Default": "5",
            "Description": "Size of the data volume to attach to the instance",
            "MaxValue": "16384",
            "MinValue": "1",
            "Type": "Number"
        },
        "DataVolumeSnapshotId": {
            "AllowedPattern": "^$|snap-[a-zA-Z0-9]{8}|snap-[a-zA-Z0-9]{17}",
            "Default": "",
            "Description": "(Optional) Snapshot ID of an existing EBS volume. Leave blank to instantiate an empty volume",
            "Type": "String"
        },
        "DomainAccessUserGroup": {
            "Default": "Domain Users",
            "Description": "Domain group of users authorized to use the remote access solution",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainDirectoryId": {
            "AllowedPattern": "d-[a-zA-Z0-9]{10}",
            "Description": "ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx",
            "Type": "String"
        },
        "DomainDnsName": {
            "AllowedPattern": "[a-zA-Z0-9-]+\\..+",
            "Default": "example.com",
            "Description": "Fully qualified domain name (FQDN) of the forest root domain, e.g. example.com",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "DomainNetbiosName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "EXAMPLE",
            "Description": "NetBIOS name of the domain (e.g. EXAMPLE)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "Ec2SubnetAz": {
            "Description": "Availability zone of the private subnet",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "Ec2SubnetId": {
            "Description": "Private Subnet ID where the file server will run",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "ExtraSecurityGroupIds": {
            "Description": "List of extra Security Group IDs to attach to the RDCB EC2 instance",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.micro",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge",
                "r4.large",
                "r4.xlarge"
            ],
            "Default": "t2.medium",
            "Description": "Amazon EC2 instance type for the Remote Desktop Session Instance",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NoPublicIp": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "Default": "true",
            "Description": "Controls whether to assign the instances a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
            "Type": "String"
        },
        "NotificationEmail": {
            "AllowedPattern": "^$|.*[@].*",
            "Description": "(Optional) Email address to subscribe to notifications and alarms",
            "Type": "String"
        },
        "RdClientAccessName": {
            "AllowedPattern": ".*[^.]$",
            "ConstraintDescription": "FQDN must not end in a period (.)",
            "Description": "DNS alias/friendly-name of the Remote Desktop cluster",
            "Type": "String"
        },
        "RdsDbAllocatedStorage": {
            "ConstraintDescription": "Maximum value is 4096. Minimum value is 20 for SQL EX/WEB. Minimum value is 200 for SQL SE/EE",
            "Default": "20",
            "Description": "The size of the database (GB)",
            "MaxValue": "4096",
            "MinValue": "20",
            "Type": "Number"
        },
        "RdsDbClass": {
            "AllowedValues": [
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge"
            ],
            "Default": "db.t2.medium",
            "Description": "Database instance class",
            "Type": "String"
        },
        "RdsDbName": {
            "AllowedPattern": "^[a-zA-Z0-9_@#][a-zA-Z0-9_@#$]*",
            "Default": "cbdb",
            "Description": "The database name; must match database name associated with the RdsSnapshot",
            "MaxLength": "116",
            "MinLength": "1",
            "Type": "String"
        },
        "RdsDbPassword": {
            "AllowedPattern": ".*[^\"@/].*",
            "ConstraintDescription": "Must not contain \", @, or /",
            "Default": "connectionbroker",
            "Description": "The database admin account password; must match password associated with the RdsSnapshot; these characters are not valid: \", @, and /",
            "NoEcho": "true",
            "Type": "String"
        },
        "RdsDbUsername": {
            "AllowedPattern": "^([a-zA-Z])([-a-zA-Z0-9])*",
            "Default": "connectionbroker",
            "Description": "The database admin account username; must match account name associated with the RdsSnapshot",
            "MaxLength": "16",
            "MinLength": "1",
            "Type": "String"
        },
        "RdsMultiAzDatabase": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "Must be either true or false. Default is false",
            "Default": "false",
            "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
            "Type": "String"
        },
        "RdsSnapshotArn": {
            "AllowedPattern": "^arn:aws:rds:.*:[0-9]{12}:snapshot:.*",
            "Default": "arn:aws:rds:us-east-1:701759196663:snapshot:cb-ws2016-2017-05-04",
            "Description": "ARN of an RDS Snapshot that contains an empty instantiation of the Connection Broker schema",
            "Type": "String"
        },
        "RdsSqlEngine": {
            "AllowedValues": [
                "sqlserver-ex",
                "sqlserver-web",
                "sqlserver-se",
                "sqlserver-ee"
            ],
            "Default": "sqlserver-ex",
            "Description": "SQL Server engine",
            "Type": "String"
        },
        "RdsSubnets": {
            "Description": "Select at least two subnets, each in different Availability Zones",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "SsmKeyId": {
            "AllowedPattern": "^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$",
            "Description": "KMS Key ID used to encrypt/decrypt the SsmRdcbCredential",
            "Type": "String"
        },
        "SsmRdcbCredential": {
            "AllowedPattern": "^(?!^([aA][wW][sS]|[sS][sS][mM]))(?=^[a-zA-Z0-9_./-]*$).*$",
            "Description": "SSM Parameter Name for a SecureString containing the domain credential for the RDCB service account; SSM Parameter Value format is '@{Username = \"<user>\"; Password = \"<password>\"}'",
            "MaxLength": "1024",
            "MinLength": "1",
            "Type": "String"
        },
        "VpcId": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "AmiIdLookup": {
            "Condition": "UseAmiLookup",
            "Properties": {
                "AmiNameSearchString": {
                    "Ref": "AmiNameSearchString"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:cfn-look-up-ami-ids"
                        ]
                    ]
                }
            },
            "Type": "Custom::AmiIdLookup"
        },
        "DataVolume": {
            "DeletionPolicy": "Snapshot",
            "UpdateReplacePolicy": "Snapshot",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "Ec2SubnetAz"
                },
                "Size": {
                    "Ref": "DataVolumeSize"
                },
                "SnapshotId": {
                    "Fn::If": [
                        "UseVolumeSnapshot",
                        {
                            "Ref": "DataVolumeSnapshotId"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Consistency Group",
                        "Value": "BackupGroup01"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "Ec2IamInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "Ec2IamRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "Ec2IamRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ec2:CreateTags"
                            ],
                            "Condition": {
                                "StringLike": {
                                    "ec2:ParentVolume": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ec2:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":*:volume/",
                                                {
                                                    "Ref": "DataVolume"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": "AllowRestrictedSnapshotActions"
                        },
                        {
                            "Action": [
                                "ec2:CreateSnapshot",
                                "ec2:DeleteSnapshot",
                                "ec2:DescribeSnapshots",
                                "ec2:DescribeVolumes"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": "AllowSnapshotActions"
                        },
                        {
                            "Action": [
                                "ssm:GetParameters"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:*:*:parameter/",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "AllowSsmGetParameters"
                        },
                        {
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:kms:*:*:key/",
                                            {
                                                "Ref": "SsmKeyId"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "AllowKmsDecrypt"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "rdcb-ec2-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "Ec2LowDiskSpaceAlarm20C": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when C: volume has less than 20% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": 5,
                "MetricName": "LogicalDiskPercentFreeSpace_C",
                "Namespace": "Windows-Default",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": 20
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm20D": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when D: volume has less than 20% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": 5,
                "MetricName": "LogicalDiskPercentFreeSpace_D",
                "Namespace": "Windows-Default",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": 20
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm40C": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when C: volume has less than 40% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": 5,
                "MetricName": "LogicalDiskPercentFreeSpace_C",
                "Namespace": "Windows-Default",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": 40
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm40D": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when D: volume has less than 40% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": 5,
                "MetricName": "LogicalDiskPercentFreeSpace_D",
                "Namespace": "Windows-Default",
                "Period": 60,
                "Statistic": "Average",
                "Threshold": 40
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2RecoveryAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": 15,
                "MetricName": "StatusCheckFailed_System",
                "Namespace": "AWS/EC2",
                "Period": 60,
                "Statistic": "Minimum",
                "Threshold": 0
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2SelfIngressAll": {
            "Properties": {
                "GroupId": {
                    "Ref": "RdcbEc2SecurityGroup"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "RdcbEc2SecurityGroup"
                }
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "Ec2ToRdsIngressTcp1433": {
            "Properties": {
                "FromPort": 1433,
                "GroupId": {
                    "Ref": "RdcbRdsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Ref": "RdcbEc2SecurityGroup"
                },
                "ToPort": 1433
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "RdCbFileServerInstance": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "cfnsetup": {
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-online-disks": {
                                "command": "powershell.exe \"foreach ($disk in (Get-CimInstance -ClassName Win32_DiskDrive)) { Set-Disk -Number $disk.Index -IsOffline $false }\"",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            },
                            "c-initialize-disks": {
                                "command": "powershell.exe C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\\InitializeDisks.ps1",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            },
                            "d-unzip-pstools": {
                                "command": "powershell.exe c:\\cfn\\scripts\\unzip-archive.ps1 c:\\cfn\\files\\pstools.zip c:\\cfn\\files\\pstools",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "interval=1",
                                            "\n",
                                            "verbose=true",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\files\\msodbcsql.msi": {
                                "source": "https://download.microsoft.com/download/D/5/E/D5EEF288-A277-45C8-855B-8E2CB7E25B96/x64/msodbcsql.msi"
                            },
                            "c:\\cfn\\files\\pstools.zip": {
                                "source": "https://download.sysinternals.com/files/PSTools.zip"
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RdCbFileServerInstance.Metadata\n",
                                            "action=cfn-init.exe -v -c update",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource RdCbFileServerInstance",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\configure-ebsbackups.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-ebsbackups.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-fileshares.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-fileshares.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-rdcb-ha.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdcb-ha.ps1"
                            },
                            "c:\\cfn\\scripts\\snap-by-group.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapByCgroup.ps1"
                            },
                            "c:\\cfn\\scripts\\snap-maintenance.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapMaint.ps1"
                            },
                            "c:\\cfn\\scripts\\unzip-archive.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/unzip-archive.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "configSets": {
                        "launch": [
                            "join-domain",
                            "cfnsetup",
                            "install-roles",
                            "reboot",
                            "configure-fileshares",
                            "configure-backups",
                            "configure-admins",
                            "configure-rdcb",
                            "reboot",
                            "finalize"
                        ],
                        "update": [
                            "cfnsetup",
                            "finalize"
                        ]
                    },
                    "configure-admins": {
                        "commands": {
                            "10-configure-admins": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            "Invoke-Command -ScriptBlock {",
                                            "$ErrorActionPreference = 'Stop'; ",
                                            "Import-Module RemoteDesktop,RemoteDesktopServices; ",
                                            "$admin = (Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters | ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Username + '@",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "'; ",
                                            "if (-not ($admin -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) { ",
                                            "[Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', $admin); ",
                                            "} } -Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-backups": {
                        "commands": {
                            "10-configure-backups": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-ebsbackups.ps1",
                                            " -SnapshotScript 'C:\\cfn\\scripts\\snap-by-group.ps1'",
                                            " -MaintenanceScript 'C:\\cfn\\scripts\\snap-maintenance.ps1'",
                                            " -ConsistencyGroup 'BackupGroup01'",
                                            " -Verbose -ErrorAction Stop"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-fileshares": {
                        "commands": {
                            "10-configure-fileshares": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-fileshares.ps1",
                                            " -DomainNetbiosName '",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "' -GroupName '",
                                            {
                                                "Ref": "DomainAccessUserGroup"
                                            },
                                            "' -Verbose -ErrorAction Stop"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-rdcb": {
                        "commands": {
                            "10-install-msodbc": {
                                "command": "msiexec /i c:\\cfn\\files\\msodbcsql.msi /qn IACCEPTMSODBCSQLLICENSETERMS=YES",
                                "waitAfterCompletion": "0"
                            },
                            "20-configure-rdcb": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "psexec",
                                                    "command"
                                                ]
                                            },
                                            " -u \\\"",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "\\",
                                            "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Username)",
                                            "\\\" -p \\\"",
                                            "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Password)",
                                            "\\\" ",
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-rdcb-ha.ps1",
                                            " -DbHostFqdn ",
                                            {
                                                "Fn::GetAtt": [
                                                    "RdsInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            " -DbName ",
                                            {
                                                "Ref": "RdsDbName"
                                            },
                                            " -DbUser ",
                                            {
                                                "Ref": "RdsDbUsername"
                                            },
                                            " -DbPassword ",
                                            {
                                                "Ref": "RdsDbPassword"
                                            },
                                            " -RdClientAccessName ",
                                            {
                                                "Ref": "RdClientAccessName"
                                            },
                                            " -Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "10-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource RdCbFileServerInstance",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "install-roles": {
                        "commands": {
                            "10-install-roles": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command ",
                                            "\"",
                                            "Install-WindowsFeature FS-FileServer,RDS-Connection-Broker,RDS-RD-Server,RDS-Licensing,RDS-Licensing-UI -Verbose",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "join-domain": {
                        "commands": {
                            "10-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command ",
                                            "Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "reboot": {
                        "commands": {
                            "10-reboot": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            " \"Restart-Computer -Force -Verbose\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": true,
                            "VolumeSize": 50,
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "DisableApiTermination": true,
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "InstanceTypeMap",
                        {
                            "Ref": "InstanceType"
                        },
                        "SupportsEbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "Ec2IamInstanceProfile"
                },
                "ImageId": {
                    "Ref": "AmiId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "Monitoring": true,
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": {
                            "Fn::If": [
                                "AssignPublicIp",
                                true,
                                false
                            ]
                        },
                        "DeleteOnTermination": true,
                        "DeviceIndex": "0",
                        "GroupSet": {
                            "Fn::Split": [
                                ",",
                                {
                                    "Fn::Join": [
                                        ",",
                                        [
                                            {
                                                "Ref": "RdcbEc2SecurityGroup"
                                            },
                                            {
                                                "Fn::Join": [
                                                    ",",
                                                    {
                                                        "Ref": "ExtraSecurityGroupIds"
                                                    }
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        "SubnetId": {
                            "Ref": "Ec2SubnetId"
                        }
                    }
                ],
                "SsmAssociations": [
                    {
                        "DocumentName": {
                            "Fn::Join": [
                                "",
                                [
                                    "awsconfig_Domain_",
                                    {
                                        "Ref": "DomainDirectoryId"
                                    },
                                    "_",
                                    {
                                        "Ref": "DomainDnsName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>",
                                "\n",
                                "cfn-init.exe -v -c launch",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource RdCbFileServerInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "if %ERRORLEVEL% equ 0 goto success\n\n",
                                " :error\n",
                                "cfn-signal.exe -e 1",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource RdCbFileServerInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"ERROR: cfn-init failed! Aborting!\"",
                                "\n",
                                "exit /b 1\n\n",
                                " :success\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "Volumes": [
                    {
                        "Device": "/dev/xvdf",
                        "VolumeId": {
                            "Ref": "DataVolume"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
        },
        "RdcbEc2SecurityGroup": {
            "Properties": {
                "GroupDescription": "Logical container for an RDCB EC2 instance",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "rdcb-ec2-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "RdcbRdsSecurityGroup": {
            "Properties": {
                "GroupDescription": "Logical container for an RDCB RDS instance",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "rdcb-rds-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "RdsIamRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "monitoring.rds.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "RdsIamRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:PutRetentionPolicy"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:*:*:log-group:RDS*"
                            ],
                            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups"
                        },
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams",
                                "logs:GetLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
                            ],
                            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "rdcb-rds-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "RdsIamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "RdsInstance": {
            "DeletionPolicy": "Delete",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "RdsDbAllocatedStorage"
                },
                "BackupRetentionPeriod": 0,
                "DBInstanceClass": {
                    "Ref": "RdsDbClass"
                },
                "DBSnapshotIdentifier": {
                    "Ref": "RdsSnapshotArn"
                },
                "DBSubnetGroupName": {
                    "Ref": "RdsSubnetGroup"
                },
                "Engine": {
                    "Ref": "RdsSqlEngine"
                },
                "MasterUserPassword": {
                    "Ref": "RdsDbPassword"
                },
                "MasterUsername": {
                    "Ref": "RdsDbUsername"
                },
                "MonitoringInterval": 1,
                "MonitoringRoleArn": {
                    "Fn::GetAtt": [
                        "RdsIamRole",
                        "Arn"
                    ]
                },
                "MultiAZ": {
                    "Ref": "RdsMultiAzDatabase"
                },
                "StorageType": "gp2",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "VPCSecurityGroups": [
                    {
                        "Ref": "RdcbRdsSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "RdsSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": {
                    "Ref": "RdsSubnets"
                }
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "SnsSubscriptionEmail": {
            "Condition": "CreateSnsSubscription",
            "Properties": {
                "Endpoint": {
                    "Ref": "NotificationEmail"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "SnsTopic"
                }
            },
            "Type": "AWS::SNS::Subscription"
        },
        "SnsTopic": {
            "Type": "AWS::SNS::Topic"
        },
        "SsmAssociationCloudWatchMetrics": {
            "Properties": {
                "Name": "AWS-ConfigureCloudWatch",
                "Parameters": {
                    "properties": [
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "{",
                                    "\"EngineConfiguration\" :",
                                    "{",
                                    "\"PollInterval\": \"00:00:15\",",
                                    "\"Components\":",
                                    "[",
                                    "{",
                                    "\"Id\" : \"LogicalDiskPercentFreeSpaceC\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"LogicalDisk\",",
                                    "\"CounterName\" : \"% Free Space\",",
                                    "\"InstanceName\" : \"C:\",",
                                    "\"MetricName\" : \"LogicalDiskPercentFreeSpace_C\",",
                                    "\"Unit\" : \"Percent\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"LogicalDiskPercentFreeSpaceD\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"LogicalDisk\",",
                                    "\"CounterName\" : \"% Free Space\",",
                                    "\"InstanceName\" : \"D:\",",
                                    "\"MetricName\" : \"LogicalDiskPercentFreeSpace_D\",",
                                    "\"Unit\" : \"Percent\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"MemoryPercentCommittedBytesInUse\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"Memory\",",
                                    "\"CounterName\" : \"% Committed Bytes In Use\",",
                                    "\"InstanceName\" : \"\",",
                                    "\"MetricName\" : \"MemoryPercentCommittedBytesInUse\",",
                                    "\"Unit\" : \"Percent\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"MemoryPagesPerSec\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"Memory\",",
                                    "\"CounterName\" : \"Pages/sec\",",
                                    "\"InstanceName\" : \"\",",
                                    "\"MetricName\" : \"MemoryPagesPerSec\",",
                                    "\"Unit\" : \"Count/Second\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"MemoryAvailableMBytes\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"Memory\",",
                                    "\"CounterName\" : \"Available MBytes\",",
                                    "\"InstanceName\" : \"\",",
                                    "\"MetricName\" : \"MemoryAvailableMBytes\",",
                                    "\"Unit\" : \"Megabytes\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"PagingFilePercentUsage\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"CategoryName\" : \"Paging File\",",
                                    "\"CounterName\" : \"% Usage\",",
                                    "\"InstanceName\" : \"_Total\",",
                                    "\"MetricName\" : \"PagingFilePercentUsage\",",
                                    "\"Unit\" : \"Percent\",",
                                    "\"DimensionName\" : \"InstanceId\",",
                                    "\"DimensionValue\" : \"{instance_id}\"",
                                    "}",
                                    "},",
                                    "{",
                                    "\"Id\" : \"CloudWatch\",",
                                    "\"FullName\" : \"AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch\",",
                                    "\"Parameters\" :",
                                    "{",
                                    "\"AccessKey\" : \"\",",
                                    "\"SecretKey\" : \"\",",
                                    "\"Region\" : \"",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\",",
                                    "\"NameSpace\" : \"Windows-Default\"",
                                    "}",
                                    "}",
                                    "],",
                                    "\"Flows\" :",
                                    "{",
                                    "\"Flows\" :",
                                    "[",
                                    "\"(LogicalDiskPercentFreeSpaceC,LogicalDiskPercentFreeSpaceD,MemoryPercentCommittedBytesInUse,MemoryPagesPerSec,MemoryAvailableMBytes,PagingFilePercentUsage),CloudWatch\"",
                                    "]",
                                    "}",
                                    "}",
                                    "}"
                                ]
                            ]
                        }
                    ],
                    "status": [
                        "Enabled"
                    ]
                },
                "ScheduleExpression": "rate(30 minutes)",
                "Targets": [
                    {
                        "Key": "tag:aws:cloudformation:stack-id",
                        "Values": [
                            {
                                "Ref": "AWS::StackId"
                            }
                        ]
                    }
                ]
            },
            "Type": "AWS::SSM::Association"
        }
    }
}
